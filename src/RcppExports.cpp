// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// derlang
NumericVector derlang(NumericVector x, NumericVector k, NumericVector l, bool log);
RcppExport SEXP _survshotgunR_derlang(SEXP xSEXP, SEXP kSEXP, SEXP lSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(derlang(x, k, l, log));
    return rcpp_result_gen;
END_RCPP
}
// perlang
NumericVector perlang(NumericVector x, NumericVector k, NumericVector l, bool log);
RcppExport SEXP _survshotgunR_perlang(SEXP xSEXP, SEXP kSEXP, SEXP lSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type l(lSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(perlang(x, k, l, log));
    return rcpp_result_gen;
END_RCPP
}
// dgamgomp
NumericVector dgamgomp(NumericVector x, NumericVector b, NumericVector s, NumericVector beta, bool log);
RcppExport SEXP _survshotgunR_dgamgomp(SEXP xSEXP, SEXP bSEXP, SEXP sSEXP, SEXP betaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dgamgomp(x, b, s, beta, log));
    return rcpp_result_gen;
END_RCPP
}
// pgamgomp
NumericVector pgamgomp(NumericVector x, NumericVector b, NumericVector s, NumericVector beta, bool log);
RcppExport SEXP _survshotgunR_pgamgomp(SEXP xSEXP, SEXP bSEXP, SEXP sSEXP, SEXP betaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(pgamgomp(x, b, s, beta, log));
    return rcpp_result_gen;
END_RCPP
}
// dlogcauchy
NumericVector dlogcauchy(NumericVector x, NumericVector mu, NumericVector sigma, bool log);
RcppExport SEXP _survshotgunR_dlogcauchy(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dlogcauchy(x, mu, sigma, log));
    return rcpp_result_gen;
END_RCPP
}
// plogcauchy
NumericVector plogcauchy(NumericVector x, NumericVector mu, NumericVector sigma, bool log);
RcppExport SEXP _survshotgunR_plogcauchy(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(plogcauchy(x, mu, sigma, log));
    return rcpp_result_gen;
END_RCPP
}
// dhypertab
NumericVector dhypertab(NumericVector x, NumericVector a, NumericVector b, bool log);
RcppExport SEXP _survshotgunR_dhypertab(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dhypertab(x, a, b, log));
    return rcpp_result_gen;
END_RCPP
}
// phypertab
NumericVector phypertab(NumericVector x, NumericVector a, NumericVector b, bool log);
RcppExport SEXP _survshotgunR_phypertab(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(phypertab(x, a, b, log));
    return rcpp_result_gen;
END_RCPP
}
// dinvlind
NumericVector dinvlind(NumericVector x, NumericVector theta, bool log);
RcppExport SEXP _survshotgunR_dinvlind(SEXP xSEXP, SEXP thetaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dinvlind(x, theta, log));
    return rcpp_result_gen;
END_RCPP
}
// pinvlind
NumericVector pinvlind(NumericVector x, NumericVector theta, bool log);
RcppExport SEXP _survshotgunR_pinvlind(SEXP xSEXP, SEXP thetaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(pinvlind(x, theta, log));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_survshotgunR_derlang", (DL_FUNC) &_survshotgunR_derlang, 4},
    {"_survshotgunR_perlang", (DL_FUNC) &_survshotgunR_perlang, 4},
    {"_survshotgunR_dgamgomp", (DL_FUNC) &_survshotgunR_dgamgomp, 5},
    {"_survshotgunR_pgamgomp", (DL_FUNC) &_survshotgunR_pgamgomp, 5},
    {"_survshotgunR_dlogcauchy", (DL_FUNC) &_survshotgunR_dlogcauchy, 4},
    {"_survshotgunR_plogcauchy", (DL_FUNC) &_survshotgunR_plogcauchy, 4},
    {"_survshotgunR_dhypertab", (DL_FUNC) &_survshotgunR_dhypertab, 4},
    {"_survshotgunR_phypertab", (DL_FUNC) &_survshotgunR_phypertab, 4},
    {"_survshotgunR_dinvlind", (DL_FUNC) &_survshotgunR_dinvlind, 3},
    {"_survshotgunR_pinvlind", (DL_FUNC) &_survshotgunR_pinvlind, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_survshotgunR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
